{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as errorsExports from './error';\nimport * as MetadataUtils from './metadata';\nimport * as type from './type';\n/**\n * @param name Name of the function.\n * @param specs Argument specs.\n * @param passed The actual arguments passed to the function.\n * @throws {fbs.Error} If the arguments are invalid.\n */\n\nexport function validate(name, specs, passed) {\n  var minArgs = specs.length;\n  var maxArgs = specs.length;\n\n  for (var i = 0; i < specs.length; i++) {\n    if (specs[i].optional) {\n      minArgs = i;\n      break;\n    }\n  }\n\n  var validLength = minArgs <= passed.length && passed.length <= maxArgs;\n\n  if (!validLength) {\n    throw errorsExports.invalidArgumentCount(minArgs, maxArgs, name, passed.length);\n  }\n\n  for (var i = 0; i < passed.length; i++) {\n    try {\n      specs[i].validator(passed[i]);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw errorsExports.invalidArgument(i, name, e.message);\n      } else {\n        throw errorsExports.invalidArgument(i, name, e);\n      }\n    }\n  }\n}\n/**\n * @struct\n */\n\nvar ArgSpec =\n/** @class */\nfunction () {\n  function ArgSpec(validator, opt_optional) {\n    var self = this;\n\n    this.validator = function (p) {\n      if (self.optional && !type.isJustDef(p)) {\n        return;\n      }\n\n      validator(p);\n    };\n\n    this.optional = !!opt_optional;\n  }\n\n  return ArgSpec;\n}();\n\nexport { ArgSpec };\nexport function and_(v1, v2) {\n  return function (p) {\n    v1(p);\n    v2(p);\n  };\n}\nexport function stringSpec(opt_validator, opt_optional) {\n  function stringValidator(p) {\n    if (!type.isString(p)) {\n      throw 'Expected string.';\n    }\n  }\n\n  var validator;\n\n  if (opt_validator) {\n    validator = and_(stringValidator, opt_validator);\n  } else {\n    validator = stringValidator;\n  }\n\n  return new ArgSpec(validator, opt_optional);\n}\nexport function uploadDataSpec() {\n  function validator(p) {\n    var valid = p instanceof Uint8Array || p instanceof ArrayBuffer || type.isNativeBlobDefined() && p instanceof Blob;\n\n    if (!valid) {\n      throw 'Expected Blob or File.';\n    }\n  }\n\n  return new ArgSpec(validator);\n}\nexport function metadataSpec(opt_optional) {\n  return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);\n}\nexport function nonNegativeNumberSpec() {\n  function validator(p) {\n    var valid = type.isNumber(p) && p >= 0;\n\n    if (!valid) {\n      throw 'Expected a number 0 or greater.';\n    }\n  }\n\n  return new ArgSpec(validator);\n}\nexport function looseObjectSpec(opt_validator, opt_optional) {\n  function validator(p) {\n    var isLooseObject = p === null || type.isDef(p) && p instanceof Object;\n\n    if (!isLooseObject) {\n      throw 'Expected an Object.';\n    }\n\n    if (opt_validator !== undefined && opt_validator !== null) {\n      opt_validator(p);\n    }\n  }\n\n  return new ArgSpec(validator, opt_optional);\n}\nexport function nullFunctionSpec(opt_optional) {\n  function validator(p) {\n    var valid = p === null || type.isFunction(p);\n\n    if (!valid) {\n      throw 'Expected a Function.';\n    }\n  }\n\n  return new ArgSpec(validator, opt_optional);\n}","map":{"version":3,"sources":["../src/implementation/args.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as errorsExports from './error';\nimport { errors } from './error';\nimport * as MetadataUtils from './metadata';\nimport * as type from './type';\n\n/**\n * @param name Name of the function.\n * @param specs Argument specs.\n * @param passed The actual arguments passed to the function.\n * @throws {fbs.Error} If the arguments are invalid.\n */\nexport function validate(name: string, specs: ArgSpec[], passed: IArguments) {\n  let minArgs = specs.length;\n  let maxArgs = specs.length;\n  for (let i = 0; i < specs.length; i++) {\n    if (specs[i].optional) {\n      minArgs = i;\n      break;\n    }\n  }\n  let validLength = minArgs <= passed.length && passed.length <= maxArgs;\n  if (!validLength) {\n    throw errorsExports.invalidArgumentCount(\n      minArgs,\n      maxArgs,\n      name,\n      passed.length\n    );\n  }\n  for (let i = 0; i < passed.length; i++) {\n    try {\n      specs[i].validator(passed[i]);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw errorsExports.invalidArgument(i, name, e.message);\n      } else {\n        throw errorsExports.invalidArgument(i, name, e);\n      }\n    }\n  }\n}\n\n/**\n * @struct\n */\nexport class ArgSpec {\n  validator: (p1: any) => void;\n  optional: boolean;\n\n  constructor(validator: (p1: any) => void, opt_optional?: boolean) {\n    let self = this;\n    this.validator = function(p: any) {\n      if (self.optional && !type.isJustDef(p)) {\n        return;\n      }\n      validator(p);\n    };\n    this.optional = !!opt_optional;\n  }\n}\n\nexport function and_(v1: (p1: any) => void, v2: Function): (p1: any) => void {\n  return function(p) {\n    v1(p);\n    v2(p);\n  };\n}\n\nexport function stringSpec(\n  opt_validator?: (p1: any) => void | null,\n  opt_optional?: boolean\n): ArgSpec {\n  function stringValidator(p: any) {\n    if (!type.isString(p)) {\n      throw 'Expected string.';\n    }\n  }\n  let validator;\n  if (opt_validator) {\n    validator = and_(stringValidator, opt_validator);\n  } else {\n    validator = stringValidator;\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\nexport function uploadDataSpec(): ArgSpec {\n  function validator(p: any) {\n    let valid =\n      p instanceof Uint8Array ||\n      p instanceof ArrayBuffer ||\n      (type.isNativeBlobDefined() && p instanceof Blob);\n    if (!valid) {\n      throw 'Expected Blob or File.';\n    }\n  }\n  return new ArgSpec(validator);\n}\n\nexport function metadataSpec(opt_optional?: boolean): ArgSpec {\n  return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);\n}\n\nexport function nonNegativeNumberSpec(): ArgSpec {\n  function validator(p: any) {\n    let valid = type.isNumber(p) && p >= 0;\n    if (!valid) {\n      throw 'Expected a number 0 or greater.';\n    }\n  }\n  return new ArgSpec(validator);\n}\n\nexport function looseObjectSpec(\n  opt_validator?: ((p1: any) => void) | null,\n  opt_optional?: boolean\n): ArgSpec {\n  function validator(p: any) {\n    let isLooseObject = p === null || (type.isDef(p) && p instanceof Object);\n    if (!isLooseObject) {\n      throw 'Expected an Object.';\n    }\n    if (opt_validator !== undefined && opt_validator !== null) {\n      opt_validator(p);\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\nexport function nullFunctionSpec(opt_optional?: boolean): ArgSpec {\n  function validator(p: any) {\n    let valid = p === null || type.isFunction(p);\n    if (!valid) {\n      throw 'Expected a Function.';\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n"]},"metadata":{},"sourceType":"module"}