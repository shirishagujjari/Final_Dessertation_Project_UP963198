{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\n\nvar NetworkXhrIo =\n/** @class */\nfunction () {\n  function NetworkXhrIo() {\n    var _this = this;\n\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make(function (resolve, reject) {\n      _this.xhr_.addEventListener('abort', function (event) {\n        _this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('error', function (event) {\n        _this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('load', function (event) {\n        resolve(_this);\n      });\n    });\n  }\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {\n    var _this = this;\n\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (type.isDef(opt_headers)) {\n      var headers = opt_headers;\n      object.forEach(headers, function (key, val) {\n        _this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getResponseText() before sending');\n    }\n\n    return this.xhr_.responseText;\n  };\n  /**\n   * Aborts the request.\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n\n  return NetworkXhrIo;\n}();\n\nexport { NetworkXhrIo };","map":{"version":3,"sources":["../src/implementation/xhrio_network.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\nimport { Headers, XhrIo } from './xhrio';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: XhrIoExports.ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make((resolve, reject) => {\n      this.xhr_.addEventListener('abort', event => {\n        this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', event => {\n        this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', event => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    opt_body?: ArrayBufferView | Blob | string | null,\n    opt_headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (type.isDef(opt_headers)) {\n      const headers = opt_headers as Headers;\n      object.forEach(headers, (key, val) => {\n        this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): XhrIoExports.ErrorCode {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n        'cannot .getErrorCode() before sending'\n      );\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n        'cannot .getResponseText() before sending'\n      );\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort() {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}