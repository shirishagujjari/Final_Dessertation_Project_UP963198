{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport { FbsBlob } from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport { Location } from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport { StringFormat } from './implementation/string';\nimport * as type from './implementation/type';\nimport { UploadTask } from './task';\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\n\nvar Reference =\n/** @class */\nfunction () {\n  function Reference(authWrapper, location) {\n    this.authWrapper = authWrapper;\n\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n  /**\n   * @return The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n\n\n  Reference.prototype.toString = function () {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  };\n\n  Reference.prototype.newRef = function (authWrapper, location) {\n    return new Reference(authWrapper, location);\n  };\n\n  Reference.prototype.mappings = function () {\n    return metadata.getMappings();\n  };\n  /**\n   * @return A reference to the object obtained by\n   *     appending childPath, removing any duplicate, beginning, or trailing\n   *     slashes.\n   */\n\n\n  Reference.prototype.child = function (childPath) {\n    args.validate('child', [args.stringSpec()], arguments);\n    var newPath = path.child(this.location.path, childPath);\n    var location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  };\n\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    /**\n     * @return A reference to the parent of the\n     *     current object, or null if the current object is the root.\n     */\n    get: function () {\n      var newPath = path.parent(this.location.path);\n\n      if (newPath === null) {\n        return null;\n      }\n\n      var location = new Location(this.location.bucket, newPath);\n      return this.newRef(this.authWrapper, location);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\n     * @return An reference to the root of this\n     *     object's bucket.\n     */\n    get: function () {\n      var location = new Location(this.location.bucket, '');\n      return this.newRef(this.authWrapper, location);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    get: function () {\n      return this.location.bucket;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    get: function () {\n      return this.location.path;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    get: function () {\n      return path.lastComponent(this.location.path);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    get: function () {\n      return this.authWrapper.service();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Uploads a blob to this object's location.\n   * @param data The blob to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n\n  Reference.prototype.put = function (data, metadata) {\n    if (metadata === void 0) {\n      metadata = null;\n    }\n\n    args.validate('put', [args.uploadDataSpec(), args.metadataSpec(true)], arguments);\n    this.throwIfRoot_('put');\n    return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);\n  };\n  /**\n   * Uploads a string to this object's location.\n   * @param string The string to upload.\n   * @param opt_format The format of the string to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n\n\n  Reference.prototype.putString = function (string, format, opt_metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n\n    args.validate('putString', [args.stringSpec(), args.stringSpec(fbsString.formatValidator, true), args.metadataSpec(true)], arguments);\n    this.throwIfRoot_('putString');\n    var data = fbsString.dataFromString(format, string);\n    var metadata = object.clone(opt_metadata);\n\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n\n    return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadata);\n  };\n  /**\n   * Deletes the object at this location.\n   * @return A promise that resolves if the deletion succeeds.\n   */\n\n\n  Reference.prototype.delete = function () {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\n   *     A promise that resolves with the metadata for this object. If this\n   *     object doesn't exist or metadata cannot be retreived, the promise is\n   *     rejected.\n   */\n\n\n  Reference.prototype.getMetadata = function () {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.getMetadata(self.authWrapper, self.location, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\n   * Updates the metadata for this object.\n   * @param metadata The new metadata for the object.\n   *     Only values that have been explicitly set will be changed. Explicitly\n   *     setting a value to null will remove the metadata.\n   * @return A promise that resolves\n   *     with the new metadata for this object.\n   *     @see firebaseStorage.Reference.prototype.getMetadata\n   */\n\n\n  Reference.prototype.updateMetadata = function (metadata) {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.updateMetadata(self.authWrapper, self.location, metadata, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\n   * @return A promise that resolves with the download\n   *     URL for this object.\n   */\n\n\n  Reference.prototype.getDownloadURL = function () {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function (metadata) {\n      var url = metadata['downloadURLs'][0];\n\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  };\n\n  Reference.prototype.throwIfRoot_ = function (name) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  };\n\n  return Reference;\n}();\n\nexport { Reference };","map":{"version":3,"sources":["../src/reference.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport { AuthWrapper } from './implementation/authwrapper';\nimport { FbsBlob } from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport { errors } from './implementation/error';\nimport { Location } from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport { StringFormat } from './implementation/string';\nimport * as type from './implementation/type';\nimport { Metadata } from './metadata';\nimport { Service } from './service';\nimport { UploadTask } from './task';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  protected location: Location;\n\n  constructor(protected authWrapper: AuthWrapper, location: string | Location) {\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @return The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  }\n\n  protected newRef(authWrapper: AuthWrapper, location: Location): Reference {\n    return new Reference(authWrapper, location);\n  }\n\n  protected mappings(): metadata.Mappings {\n    return metadata.getMappings();\n  }\n\n  /**\n   * @return A reference to the object obtained by\n   *     appending childPath, removing any duplicate, beginning, or trailing\n   *     slashes.\n   */\n  child(childPath: string): Reference {\n    args.validate('child', [args.stringSpec()], arguments);\n    let newPath = path.child(this.location.path, childPath);\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return A reference to the parent of the\n   *     current object, or null if the current object is the root.\n   */\n  get parent(): Reference | null {\n    let newPath = path.parent(this.location.path);\n    if (newPath === null) {\n      return null;\n    }\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    let location = new Location(this.location.bucket, '');\n    return this.newRef(this.authWrapper, location);\n  }\n\n  get bucket(): string {\n    return this.location.bucket;\n  }\n\n  get fullPath(): string {\n    return this.location.path;\n  }\n\n  get name(): string {\n    return path.lastComponent(this.location.path);\n  }\n\n  get storage(): Service {\n    return this.authWrapper.service();\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data The blob to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata: Metadata | null = null\n  ): UploadTask {\n    args.validate(\n      'put',\n      [args.uploadDataSpec(), args.metadataSpec(true)],\n      arguments\n    );\n    this.throwIfRoot_('put');\n    return new UploadTask(\n      this,\n      this.authWrapper,\n      this.location,\n      this.mappings(),\n      new FbsBlob(data),\n      metadata\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param string The string to upload.\n   * @param opt_format The format of the string to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  putString(\n    string: string,\n    format: StringFormat = StringFormat.RAW,\n    opt_metadata?: Metadata\n  ): UploadTask {\n    args.validate(\n      'putString',\n      [\n        args.stringSpec(),\n        args.stringSpec(fbsString.formatValidator, true),\n        args.metadataSpec(true)\n      ],\n      arguments\n    );\n    this.throwIfRoot_('putString');\n    let data = fbsString.dataFromString(format, string);\n    let metadata = object.clone<Metadata>(opt_metadata);\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n    return new UploadTask(\n      this,\n      this.authWrapper,\n      this.location,\n      this.mappings(),\n      new FbsBlob(data.data, true),\n      metadata\n    );\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @return A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   *     A promise that resolves with the metadata for this object. If this\n   *     object doesn't exist or metadata cannot be retreived, the promise is\n   *     rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.getMetadata(\n        self.authWrapper,\n        self.location,\n        self.mappings()\n      );\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata The new metadata for the object.\n   *     Only values that have been explicitly set will be changed. Explicitly\n   *     setting a value to null will remove the metadata.\n   * @return A promise that resolves\n   *     with the new metadata for this object.\n   *     @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.updateMetadata(\n        self.authWrapper,\n        self.location,\n        metadata,\n        self.mappings()\n      );\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * @return A promise that resolves with the download\n   *     URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function(metadata) {\n      let url = (metadata['downloadURLs'] as string[])[0];\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  }\n\n  private throwIfRoot_(name: string) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}